const assert = require("assert");

// Stack, Queue, ArrayList

class Collection {
  #arr = [];
  constructor(...args) {
    this.#arr.push(...args);
  }
  #isQueue() {
    return this instanceof Queue;
  }
  toArray() {
    return this.#isQueue() ? this._arr.toReversed() : this._arr;
  }
  print() {
    console.log(`<${this.constructor.name}:${this.toArray()}>`);
  }

  get length() {
    return this.#arr.length;
  }

  get isEmpty() {
    return !this.#arr.length;
  }

  clear() {
    this.#arr.length = 0;
  }

  get _arr() {
    return this.#arr;
  }
  remove() {
    return this.#isQueue() ? this.#arr.shift() : this.#arr.pop();
  }
  get peek() {
    return this.#isQueue() ? this.#arr[0] : this.#arr.at(-1);
  }

  get poll() {
    this.remove();
    return this.peek;
  }

  push(...args) {
    this.#arr.push(...args);
    return this.#arr;
  }
}

class Stack extends Collection {
  pop() {
    return this._arr.pop();
  }
}

class Queue extends Collection {
  enqueue(...args) {
    return this.push(...args);
  }
  dequeue() {
    return this._arr.shift();
  }
}

console.log("-----------------------------------------");
const stack = new Stack();
assert.deepStrictEqual(stack.toArray(), []);
stack.push(3); // 추가하기
assert.deepStrictEqual(stack.toArray(), [3]);
stack.pop();
assert.deepStrictEqual(stack.toArray(), []);

const stackT = new Stack(...[[1], [2]]);
assert.deepStrictEqual(stackT.toArray(), [[1], [2]]);

// const stack2 = new Stack(1, 2);
const stack2 = new Stack(...[1, 2]);
assert.deepStrictEqual(stack2.toArray(), [1, 2]);
stack2.push(2).push(3); // 추가하기
assert.deepStrictEqual(stack2.toArray(), [1, 2, 2, 3]);
assert.strictEqual(stack2.pop(), 3);
// assert.deepStrictEqual(stack2.toArray(), [1, 2]);
stack2.push(4, 5); // 추가하기
assert.deepStrictEqual(stack2.toArray(), [1, 2, 2, 4, 5]);

assert.strictEqual(stack2.peek, 5);
assert.strictEqual(stack2.poll, 1);
assert.strictEqual(stack2.remove(), 5);
assert.deepStrictEqual(stack2.toArray(), [1, 2, 2, 4]);

stack2.arr = [5, 6, 7]; //error
assert.notDeepStrictEqual(stack2.toArray(), [5, 6, 7]);
stack2.print();

stack2.clear();
assert.deepStrictEqual(stack2.toArray(), []);
assert.strictEqual(stack2.isEmpty, true);

//--------------------------------

const queue = new Queue();
assert.deepStrictEqual(queue.toArray(), []);
queue.enqueue(3); // 추가하기
assert.deepStrictEqual(queue.toArray(), [3]);
queue.enqueue(2); // 추가하기
assert.deepStrictEqual(queue.toArray(), [2, 3]);
assert.strictEqual(queue.dequeue(), 3);
assert.deepStrictEqual(queue.toArray(), [2]);
queue.enqueue(5, 6); // 추가하기
assert.deepStrictEqual(queue.toArray(), [6, 5, 2]);
queue.print();

assert.strictEqual(queue.peek, 2); // [6, 5, 2]
assert.strictEqual(queue.poll, 2); // [6, 5]
assert.strictEqual(queue.remove(), 5); // [6]
assert.deepStrictEqual(queue.toArray(), [6]);

queue.clear();
assert.deepStrictEqual(queue.toArray(), []);
assert.strictEqual(queue.isEmpty, true);

const queue2 = new Queue(1, 2);
assert.deepStrictEqual(queue2.toArray(), [2, 1]);
